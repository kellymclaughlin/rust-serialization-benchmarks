//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package types

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"sort"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82392 = 1
	codecSelferCcRAW2392  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2392     = 10
	codecSelferValueTypeMap2392       = 9
	codecSelferValueTypeString2392    = 6
	codecSelferValueTypeInt2392       = 2
	codecSelferValueTypeUint2392      = 3
	codecSelferValueTypeFloat2392     = 4
	codecSelferValueTypeNil2392       = 1
	codecSelferBitsize2392            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2392 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2392                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer2392 struct{}

func codecSelfer2392False() bool { return false }
func codecSelfer2392True() bool  { return true }

type codecSelfer2392stringSlice []string

func (p codecSelfer2392stringSlice) Len() int           { return len(p) }
func (p codecSelfer2392stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2392stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2392uint64Slice []uint64

func (p codecSelfer2392uint64Slice) Len() int           { return len(p) }
func (p codecSelfer2392uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2392uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2392int64Slice []int64

func (p codecSelfer2392int64Slice) Len() int           { return len(p) }
func (p codecSelfer2392int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2392int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2392float64Slice []float64

func (p codecSelfer2392float64Slice) Len() int           { return len(p) }
func (p codecSelfer2392float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2392float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 28 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 28, need " + ver + ". Re-generate file: " + file))
	}
}

func (LogMsg) codecSelferViaCodecgen() {}
func (x *LogMsg) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.SvcID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Endpoint))
			z.EncWriteArrayElem()
			if x.Msg == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Msg))
			} // end block: if x.Msg slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"endpoint\"")
				} else {
					r.EncodeString(`endpoint`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Endpoint))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"msg\"")
				} else {
					r.EncodeString(`msg`)
				}
				z.EncWriteMapElemValue()
				if x.Msg == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Msg))
				} // end block: if x.Msg slice == nil
				z.EncWriteMapElemKey()
				r.EncodeString(`svc_id`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.SvcID))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`svc_id`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.SvcID))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"endpoint\"")
				} else {
					r.EncodeString(`endpoint`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Endpoint))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"msg\"")
				} else {
					r.EncodeString(`msg`)
				}
				z.EncWriteMapElemValue()
				if x.Msg == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Msg))
				} // end block: if x.Msg slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *LogMsg) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2392 {
		*(x) = LogMsg{}
	} else if yyct2 == codecSelferValueTypeMap2392 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2392 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2392)
	}
}

func (x *LogMsg) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "svc_id":
			x.SvcID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "endpoint":
			x.Endpoint = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "msg":
			x.Msg = z.DecodeBytesInto(([]byte)(x.Msg))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *LogMsg) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyb8 = !z.DecContainerNext(yyj8, l, yyhl8)
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.SvcID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj8++
	yyb8 = !z.DecContainerNext(yyj8, l, yyhl8)
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Endpoint = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj8++
	yyb8 = !z.DecContainerNext(yyj8, l, yyhl8)
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Msg = z.DecodeBytesInto(([]byte)(x.Msg))
	yyj8++
	for ; z.DecContainerNext(yyj8, l, yyhl8); yyj8++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *LogMsg) IsCodecEmpty() bool {
	return !(x.SvcID != "" || x.Endpoint != "" || len(x.Msg) != 0 || false)
}

func (IngestData) codecSelferViaCodecgen() {}
func (x *IngestData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(4)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Type))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Source))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Timestamp))
			z.EncWriteArrayElem()
			yy10 := &x.Msg
			if yyxt11 := z.Extension(yy10); yyxt11 != nil {
				z.EncExtension(yy10, yyxt11)
			} else {
				yy10.CodecEncodeSelf(e)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(4)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"msg\"")
				} else {
					r.EncodeString(`msg`)
				}
				z.EncWriteMapElemValue()
				yy12 := &x.Msg
				if yyxt13 := z.Extension(yy12); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					yy12.CodecEncodeSelf(e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"src\"")
				} else {
					r.EncodeString(`src`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Source))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"timestamp\"")
				} else {
					r.EncodeString(`timestamp`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Timestamp))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"type\"")
				} else {
					r.EncodeString(`type`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Type))
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"type\"")
				} else {
					r.EncodeString(`type`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Type))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"src\"")
				} else {
					r.EncodeString(`src`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Source))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"timestamp\"")
				} else {
					r.EncodeString(`timestamp`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Timestamp))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"msg\"")
				} else {
					r.EncodeString(`msg`)
				}
				z.EncWriteMapElemValue()
				yy20 := &x.Msg
				if yyxt21 := z.Extension(yy20); yyxt21 != nil {
					z.EncExtension(yy20, yyxt21)
				} else {
					yy20.CodecEncodeSelf(e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *IngestData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2392 {
		*(x) = IngestData{}
	} else if yyct2 == codecSelferValueTypeMap2392 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2392 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2392)
	}
}

func (x *IngestData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "type":
			x.Type = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "src":
			x.Source = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "timestamp":
			x.Timestamp = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "msg":
			if yyxt8 := z.Extension(x.Msg); yyxt8 != nil {
				z.DecExtension(&x.Msg, yyxt8)
			} else {
				x.Msg.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *IngestData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2392
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyb9 = !z.DecContainerNext(yyj9, l, yyhl9)
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Type = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj9++
	yyb9 = !z.DecContainerNext(yyj9, l, yyhl9)
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Source = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj9++
	yyb9 = !z.DecContainerNext(yyj9, l, yyhl9)
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Timestamp = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj9++
	yyb9 = !z.DecContainerNext(yyj9, l, yyhl9)
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt14 := z.Extension(x.Msg); yyxt14 != nil {
		z.DecExtension(&x.Msg, yyxt14)
	} else {
		x.Msg.CodecDecodeSelf(d)
	}
	yyj9++
	for ; z.DecContainerNext(yyj9, l, yyhl9); yyj9++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
}

func (x *IngestData) IsCodecEmpty() bool {
	return !(x.Type != "" || x.Source != "" || x.Timestamp != "" || !(x.Msg.IsCodecEmpty()) || false)
}
